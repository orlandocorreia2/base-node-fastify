// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

enum PermissionRuleType {
  permissionGroup
  user
}


model PermissionRule {
  id String @id @default(uuid())
  rule String @unique
  type PermissionRuleType
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  PermissionGroupRule PermissionGroupRule[]

  @@map("permission_rules")
}

model PermissionGroup {
  id String @id @default(uuid())
  name String @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  users UserPermissionGroup[]
  PermissionGroupRule PermissionGroupRule[]

  @@map("permission_groups")
}

model PermissionGroupRule {
  permission_group_id String
  permission_rule_id String

  permissionGroup PermissionGroup @relation(fields: [permission_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissionRule PermissionRule @relation(fields: [permission_rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([permission_group_id, permission_rule_id])
  @@map("permission_group_rules")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  expiredAt DateTime
  phone String?
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  permissionGroups UserPermissionGroup[]

  @@map("users")
}

model UserPermissionGroup {
  user_id String
  permission_group_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissionGroup PermissionGroup @relation(fields: [permission_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, permission_group_id])
  @@map("users_permission_groups")
}




